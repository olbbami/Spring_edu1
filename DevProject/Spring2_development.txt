┌──────────────────────
│	1장. 스프링 개발 환경
└──────────────────────

	JDK 1.8, Tomcat 8.5.x, Oracle 11g xe
	이클립스 4.16, STS 3.9.15
	
┌──────────────────────
│	2장. 프로젝트 생성
└──────────────────────

	스프링 MVC 구조
	
		1. 스프링 MVC 구조
			스프링 MVC는 DispatcherServlet, View Resolver, Handler, View 등으로 구성되어 있다.
			
			스프링 MVC 요청 처리 흐름도
			[단계별 설명]
			1) 클라이언트(브라우저)의 요청을 DispatcherServlet이 받는다.
			2) 받은 요청을 처리할 수 있는 Handler의 이름을 HandlerMapping에게 물어 본다.
			3) HandlerMapping은 요청 URL을 비롯한 여러 요청 정보를 가지고 handler를 판단한다.
			4) DispatcherServlet은 HadlerMapping으로 부터 선택받은 Handler에게 요청을 보낸다.
			5) Handler는 요청을 적절히 처리하고 응답에서 랜더링해야 하는 View Name을 판단해서 DispatcherServlet에게 전송한다.
			6) DispatcherServlet은 논리적인 View Name을 View Resolver에 전달한다.
			7) View Resolver는 응답에 필요한 View를 생성하여 DispatcherServlet에 보낸다.
			8) DispatcherServlet은 해당하는 View에 Model을 전달한다.
			9) View는 Model을 참조해서 응답을 생성한다.
			10) DispatcherServlet은 생성된 응답을 클라이언트(브라우저)에 반환한다.
			
		2. 스프링 MVC 프로젝트 생성
			Spring Legacy Proejct(Spring MVC Project) 생성
			
		3. MVC 프로젝트 파일 구성
			프로젝트를 새로 생성하면 관련 파일들과 폴더들이 자동으로 생성된다.
			
			구성요소
			- pom.xml														: 메이븐 프로젝트 빌드 파일
			- src/main/java													: 자바 소스 경로
			- src/main/resources											: 리소스 파일 경로
			- src/.../WEB-INF/web.xml										: 웹 컨테이너 설정 파일
			- src/.../WEB-INF/spring/root-context.xml						: 스프링 설정 파일
			- src/.../WEB-INF/spring/appServlet/servlet-context.xml			: 스프링 웹 설정 파일
			- src/.../WEB-INF/views											: 뷰 파일 경로
			
		4. 로그 레벨 설정
		
		Log4j 구성 요소
		
			요소				|						설명
		──────────────────────────────────────────────────────────────────────────────────
			Logger			|	출력할 메시지를 Appender에 전달합니다.
		──────────────────────────────────────────────────────────────────────────────────
			Appender		|	전달된 로그를 어디에 출력할 지 결정합니다. (콘솔 출력, 파일 기록, DB 저장 등)
		──────────────────────────────────────────────────────────────────────────────────
			Layout			|	로그를 어떤 형식으로 출력할지 결정합니다.
		──────────────────────────────────────────────────────────────────────────────────
		
		Log4j 레벨
		
			로그레벨			|						설명
		───────────────────────────────────────────────────────────────────────────────────────────────────
			FATAL			|	아주 심각한 에러가 발생한 상태를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			ERROR			|	어떠한 요청을 처리하는 중 문제가 발생한 상태를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			WARN			|	프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			INFO			|	어떠한 상태변경과 같은 정보성 메시지를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			DEBUG			|	개발시 디버그 용도로 사용하는 메시지를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			TRACE			|	디버그 레벨이 너무 광범위한것을 해결하기 위해서 좀 더 상세한 이벤트를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────			
			
┌──────────────────────
│	3장. 컨트롤러 요청 매핑
└──────────────────────
			
	1. 요청 경로 매핑
		@RequestMapping의 value속성에 요청 경로를 설정한다.
		- 요청 경로는 반드시 설정해야 하는 필수 정보이다.
		- 속성이 하나일 때는 속성명을 생략할 수 있다.
		- 컨트롤러의 클래스 레벨과 메서드 레벨로 지정할 수 있다.
		- 클래스 레벨로 요청 경로를 지정하면 메서드 레벨에서 지정한 경로의 기본 경로로 취급된다.
		- 클래스 레벨의 요청 경로에 메서드 레벨의 요청 경로를 덧붙인 형태가 최종 경로가 된다.
		
		[요청과 매핑]
		요청 : http://localhost/board/register
		매핑 : @RequestMapping(value="/board/register")
		
	2. 경로 패턴 매핑
		요청 경로를 동적으로 표현이 가능한 경로 패턴을 지정할 수 있다.
		- URL 경로 상의 변하는 값을 경로 변수로 취급한다.
		- 경로 변수에 해당하는 값을 파라미터 변수에 설정할 수 있다.
		
		[요청과 매핑] 
		요청 : http://localhost/board/read/100
		매핑 : @RequestMapping(value="/board/read/{boardNo}")
		
	3. HTTP 메소드 매핑
		method 속성을 사용하여 HTTP 메소드를 매핑 조건으로 지정할 수 있다.
		화면으로 응답하는 경우에는 HTTP 메소드로 GET방식과 POST방식 두가지를 사용할 수 있다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/register
		매핑 : @RequestMapping(value="/board/register", method=RequestMethod.GET)	
		매핑 : @RequestMapping(value="/board/register", method=RequestMethod.POST)	
			
	4. Params 매핑
		요청 파라미터를 매핑 조건으로 지정하는 경우에는 params 속성을 사용한다.
		버튼이나 링크에 따라 호출할 메서드를 바꿔야 할 때 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/get?register
		매핑 : @RequestMapping(value="/board/get", method=RequestMethod.GET, params="register")
		
	5. Headers 매핑
		요청 헤더를 매핑 조건으로 지정하는 경우에는 headers 속성을 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method=RequestMethod.PUT, headers="X-HTTP-Method-Override=PUT")	
		
	6. Content Type 매핑
		요청의 Content-Type 헤더 값을 매핑 조건으로 지정하는 경우에는 consumes 속성을 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method=RequestMethod.POST, consumes="application/json")
		
	7. Accept 매핑
		요청 Accept 헤더 값을 매핑 조건으로 지정하는 경우에는 produces 속성을 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method=RequestMethod.GET, produces="application/json")
		
┌──────────────────────
│	4장. 컨트롤러 응답
└──────────────────────
		
	1. Void 타입
		호출하는 URL과 동일한 뷰 이름을 나타내기 위해 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0101
		응답 : void (요청한 경로와 동일한 뷰 이름으로 리턴)
		
	2. String 타입
		뷰 파일의 경로와 파일 이름을 나타내기 위해 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0201
		응답 : String (반환된 값으로 페이지를 찾는다.)
		
	3. 자바빈즈 클래스 타입
		JSON 객체 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
		- jackson-databind 라이브러리를 설치하고 @ReseponseBody를 지정하여 객체를 응답으로 내보낼 수 있다.
		- 둘중에 1개라도 하지 않는 경우, 에러가 발생할 수 있다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0301
		응답 : 자바빈즈 (객체에 값이 담겨 해당 객체를 리턴한다.)
		
	4. 컬렉션 List 타입
		JSON 객체 배열 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
		- 반환값이 컬렉션 List 타입이면 JSON 객체 배열 타입으로 자동으로 반환한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0401
		응답 : 컬렉션 List
		
	5. 컬렉션 Map 타입
		Map 형태의 컬렉션 자료를 JSON 객체 타입의 데이터로 만들어서 반환하는 용도로 사용한다.
		- 반환값이 컬렉션 Map 타입이면 JSON 객체 타입으로 자동으로 변환한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0501
		응답 : 컬렉션 Map
		
	6. ResponseEntity<Void> 타입
		response 할 때 HTTP 헤더 정보와 내용을 가공하는 용도로 사용한다.
		- 반환값이 해당 URL이므로 개발자 도구 > 네트워킹 탭을 활용하여 응답된 페이지 정보를 확인할 수 있다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0601
		응답 : ResponseEntity<Void>
		
	7. ResponseEntity<String> 타입
		response 할 때 HTTP 헤더 정보와 문자열 데이터를 전달하는 용도로 사용한다.
		- 페이지에서 결과값으로 문자열을 함께 확인 할 수 있다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0701
		응답 : ResponseEntity<String>
		
	8. ResponseEntity<Member> 타입
		response 할 때 HTTP 헤더 정보와 객체 데이터를 전달하는 용도로 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0801
		응답 : ResponseEntity<Member>
		
	9. ResponseEntity<List<Member>> 타입
		response 할 때 HTTP 헤더 정보와 객체 배열 데이터를 전달하는 용도로 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0901
		응답 : ResponseEntity<List<member>>
		
	10. ResponseEntity<Map<String, Member>> 타입
		response 할 때 HTTP 헤더 정보와 객체 데이터를 Map 형태로 전달하는 용도로 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome1001
		응답 : RepsonseEntity<Map<String, Member>>
		
	11. ResponseEntity<byty[]> 타입
		response 할 때 HTTP 헤더 정보와 바이너리 파일 데이터를 전달하는 용도로 사용한다.
		- 파일을 처리하는 경우에는 의존 라이브러리(commons-io)를 추가해야한다.
		- 추가는 pom.xml에서 dependency를 추가한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome1101
			 http://localhost/goHome1102
		응답 : ResponseEntity<byte[]>
		
┌──────────────────────
│	5장. 컨트롤러 요청 처리
└──────────────────────
			
	1. 컨트롤러 메서드 매개변수
	
		주요 매개 변수
		- Model
			이동 대상에 전달할 데이터를 가지고 있는 인터페이스
		- RedirectAttributes
			리다이렉트 대상에 전달할 데이터를 가지고 있는 인터페이스
		- 자바빈즈 클래스
			요청 파라미터를 가지고 있는 자바빈즈 클래스
		- MultipartFile
			Multipart 요청을 사용해 업로드 된 파일 정보를 가지고 있는 인터페이스
		- BindingResult
			도메인 클래스의 입력값 검증 결과를 가지고 있는 인터페이스
		- java.security.Principal
			클라이언트 인증을 위한 사용자 정보를 가지고 있는 인터페이스
	
	2. 요청 처리
	
		1. URL 경로 상의 쿼리 파라미터 정보로부터 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register?userId=hongkd&password=1234 (a태그를 이용)
		처리 : registerByparameter(String userId, String password)			
			
		2. URL 경로 상의 경로 변수로부터 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register/hongkd (a태그를 이용)
		처리 : String registerByPath(String userId)
		
		3. HTML Form 필드명과 컨트롤러 매개변수명이 일치하면 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register01 (form 태그를 이용)
		처리 : String register01(String userId)
		
		4. HTML Form 필드가 여러개일 경우에도 컨트롤러 매개변수명이 일치하면 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register02 (form 태그를 이용)
		처리 : String register02(String userId, String password)
		
		5. HTML Form 필드가 여러개일 경우에 컨트롤러 매개변수의 위치는 상관없다.
		[요청과 처리]
		요청 : /register03 (form 태그를 이용)
		처리 : String register03(String password, String userId)
		
		6. HTML Form 필드값이 숫자일 경우에는 컨트롤러 매개변수 타입이 문자열이면 그대로 문자열 형태로 요청 데이터를 취득한다.
		[요청과 처리]
		요청 : /register04 (form 태그를 이용)
		처리 : String register04(String userId, String password, String coin)
		
		7. HTML Form 필드값이 숫자일 경우에는 컨트롤러 매개변수 타입이 숫자형이면 숫자로 타입변환하여 요청 데이터를 취득한다.
		[요청과 처리]
		요청 : /register05 (form 태그를 이용)
		처리 : String register05(String userId, String password, int coin)
		
	3. 요청 데이터 처리 어노테이션
	
		@PathVariable
		- URL에서 경로 변수 값을 가져오기 위한 어노테이션
		@RequestParam
		- 요청 파라미터 값을 가져오기 위한 어노테이션
		@RequestHeader
		- 요청 헤더 값을 가져오기 위한 어노테이션
		@RequestBody
		- 요청 본문 내용을 가져오기 위한 어노테이션
		@CookieValue
		- 쿠키 값을 가져오기 위한 어노테이션
		
		1. URL 경로 상의 경로 변수로부터 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register/hongkd (a 태그를 이용)
		처리 : String registerByPath(@PathVariable String userId)
		
		2. URL 경로 상의 경로 변수가 여러개일때 @PathVariable 어노테이션을 사용하여 특정한 경로 변수명을 지정해준다.
		[요청과 처리]
		요청 : /register/hongkd/100 (a 태그를 이용)
		처리 : String registerByPath(@PathVariable("userId") String userId, @PathVariable("coin") int coin)
			
		3. HTML 폼의 필드명과 컨트롤러 매개변수명이 일치하면 요청을 처리할 수 있다.
		[요청과 처리]
		요청 : /register0101 (form 태그를 이용 - id name 설정 : userId)
		처리 : String register0101(String userId)
		
		4. HTML Form 필드명과 컨트롤러 매개변수명이 일치(대소문자 구분)하지 않으면 요청을 처리할 수 없다.
		[요청과 처리]
		요청 : /register0201 (form 태그를 이용 - id name 설정 : userId)
		처리 : String register0201(String username)
		
		5. @RequestParam 어노테이션을 사용하여 특정한 HTML Form의 필드명을 지정하여 요청을 처리한다.
		[요청과 처리]
		요청 : /register0202 (form 태그를 이용 - id name 설정 : userId)
		처리 : String register0202(@RequestParam("userId") String username)
		
	4. 요청 처리 자바빈즈
	
		1. 폼 텍스트 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /beans/register01 (form 태그를 이용)
		처리 : String registerJavaBeans01(Member member)
		
		2. 폼 텍스트 필드 요소값을 자바빈즈 매개변수와 기존 데이터 타입인 정수 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /beans/register02 (from 태그를 이용)
		처리 : String registerJavaBeans02(Member member, int coin)
		
		3. 여러 개의 폼 텍스트 필드 요소값을 매개변수 순서와 상관없이 매개변수명을 기준으로 처리한다.
		[요청과 처리]
		요청 : /beans/registerJavaBeans03(int uid, Member member)
		처리 : String registerJavaBeans03(int uid, Member member)
		
	5. Data 타입 처리
		스프링 MVC는 Date 타입의 데이터를 처리하는 여러 방법을 제공합니다.
		따로 지정하지 않으면 변환에 적합한 날짜 문자열 형식은 yyyy/MM/dd입니다.
		
		1. 쿼리 파라미터(dateOfBirth=1234)로 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=1234
		처리 : registerByGet01(String userId, Date dateOfBirth)
		
		2. 쿼리 파라미터(dateOfBirth=2022-11-28)로 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=2022-11-28
		처리 : registerByGet01(String userId, Date dateOfBirth)
		
		3. 쿼리 파라미터(dateOfBirth=20221128)로 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=20221128
		처리 : registerByGet01(String userId, Date dateOfBirth)
			
		4. 쿼리 파라미터(dateOfBirth=2022/11/28)로 전달받은 값이 날짜 문자열 형식에 맞아 Date 타입으로 변환에 성공한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=2022/11/28
		처리 : registerByGet01(String userId, Date dateOfBirth)
		[성공!!]
		
		5.Member 매개변수와 쿼리 파라미터(dateOfBirth=20221128) 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet02?userId=honkd&dateOfBirth=20221128
		처리 : String registerByGet02(Member member)
		
		6. Member 매개변수와 폼 방식 ::: 요청 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /register (form 태그 이용 - dateOfBirth 값을 20221128 tjfwjd)
		처리 : String register(Member member)
		
	6. @DateTimeFormat 어노테이션
		@DateTimeFormat 어노테이션의 pattern 속성값에 원하는 날짜 형식을 지정할 수 있다.
		
		요청 : 5번 항목에 해당하는 요청 부를 이용하여 테스트 시, 날짜형식 패턴이 'yyyyMMdd'와 같은 형식으로 요청한 경우,
			[성공]으로 정상적인 날짜 데이터를 확인할 수 있다.
		처리 : 5번 항목 참고바랍니다.
		
	7. 폼 방식 요청 처리
	
		1. 폼 텍스트 필드 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerUserId
		처리 : String registerUserId(String userId)
		
		2. 폼 텍스트 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMemberUserId
		처리 : String registerMemberUserId(Member member)
		
		3. 폼 비밀번호 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerPassword
		처리 : String registerPassword(Member member)
		
		4. 폼 라디오버튼 요소ㅛ값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerRadio
		처리 : String registerRadio(String gender)
		
		5. 폼 셀렉트 박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerSelect 
		처리 : String registerSelect(String nationality)
			
		6. 복수 선택이 가능한 폼 셀렉트 박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMultipleSelect01
		처리 : String registerMultpleSelect01(String cars)
		[ex) cars=volvo,jeep,bmw]
		
		7. 복수 선택이 가능한 폼 셀렉트 박스 요소값을 문자열 배열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMultipleSelect02
		처리 : String registerMultipleSelect02(String[] carArray)
		[ex) carArray[volvo,jeep,bmw] 형태로 들어옴(각 index를 가짐)]
		
		8. 복수 선택이 가능한 폼 셀렉트 박스 요소값을 문자열 요소를 가진 리스트 컬렉션 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMultipleSelect03
		처리 : String registerMultipleSelect03(ArrayList<String> carList)
		[ex) carList null] ::: 리스트로 값을 가져올 시 null
		
		9. 폼 체크박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox01
		처리 : String registerCheckbox01(String hobby)
		[ex) hobby = Sports,Movie]
		
		10. 폼 체크박스 요소값을 문자열 배열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox02
		처리 : String registerCheckbox02(String[] hobbyArray)
		[ex) hobbyArray[Sports, Movie] 형태로 들어옴(각 index를 가짐)]
		
		11. 폼 체크박스 요소값을 문자열 요소를 가진 리스트 컬렉션 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox03
		처리 : String registerCheckbox03(List<String> hobbyList)
		[No primary or default constructor found for interface java.util.List 에러 발생]
		
		12. 폼 체크박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox04
		처리 : String registerCheckbox04(String developer)
		[체크되면 value에 설정된 값, 체크 안되면 null]
		
		13. 폼 체크박스 요소값을 기본 데이터 타입인 불리언 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox05
		처리 : String registerCheckbox05(boolean foreigner)
		[체크되면  value에 설정된 값 true, 체크 안되면 false]
		
		14. 폼 텍스트 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerAddress
		처리 : String registerAddress(Address address)
		
		15. 폼 텍스트 필드 요소값을 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerUserAddress
		처리 : String registerUserAddress(Member member)
		
		16. 폼 텍스트 필드 요소값을 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerUserCardList
		처리 : String registerUserCardList(Member member)
		
		17. 폼 텍스트 영역 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerTextArea
		처리 : String registerTextArea(String introduction)
		
		18. 폼 텍스트 영역 요소값을 Date 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerDate01
		처리 : String registerDate01(Date dateOfBirth)
		
		19. 폼 텍스트 영역 요소값을 @DateTimeFormat 어노테이션을 지정하여 Date 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerDate02
		처리 : String registerDate02(@DateTimeFormat(patter="yyyyMMdd") Date dateOfBirth)
		
	8. 파일업로드 폼 방식 요청 처리
		**** 중요!!! 
		[ 파일 업로드 폼 방식 요청 처리를 하기 전, 준비사항 ]
		[1]. pom.xml에 commons-fileupload, commons-io 라이브러리 의존 관계 등록
		 - Maven Project Update를 진행하여 업데이트를 합니다.
		   > 업데이트를 진행하지 않는 경우, 내가 등록한 의존관계가 제대로 적용되지 않아 라이브러리를 사용하는데 있어서 에러가 발생할 수 있다.
		   > 업데이트를 진행할 때, 하단 오른쪽에 progress Bar형태가 다운로드 되고 있는 형태로 바뀌고, 100%로 바뀌면 다운로드가 완료되어 적용이 완료된것이다.
		   > Maven Project Update를 진행하였는데 내가 작성하고 있는 프로젝트에서 에러가 발생하고 있다????
		     > 얼른 Clean!!! Clean!!!! Clean!!!!!!!!!!!!!!!!!!!!!
		[2]. web.xml에 모든 경로에 대해서 MultipartFilter를 등록합니다.
		 - 스프링에서 제공하는 MultipartFilter를 이용합니다.
		 
		**** 위와 같은 설정을 진행하였는데도 데어라 나는 경우 조치방법
		[3]. servers > context.xml로 이동하여 Context 태그 옵션을 추가합니다.
		 - [ allowCasualMultipartparsing="true" path="/" ] 옵션 추가 (Context 태그내)
		 - ex) <Context allowCasualMultipartparsing="true" path="/"> ... </Context>
		 
		1. 파일 업로드 폼 파일 요소값을 스프링 MVC가 지원하는 MultipartFile 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile01
		처리 : String registerFile01(MultipartFile picture) throws Exception
		
		2. 파일업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFile 매개변수와 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile02
		처리 : String registerFile02(String userId, String password, MultipartFile picture) throws Exception
		
		3. 파일 업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFile 매개변수와 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile03
		처리 : String registerFile03(Member member, MultipartFile picture) throws Exception
		
		4. 파일업로드 폼 파일 요소값과 텍스트 필드 요소값을 FileMember 타입의 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile04
		처리 : String registerFile04(FileMember fileMember) throws Exception
		
		5. 여러개의 파일업로드를 폼 파일 요소값을 여러 개의 MultipartFile 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile05
		처리 : String registerFile05(MultipartFile picture, MultipartFile picture2) throws Exception
		
		6. 여러 개의 파일 업로드를 폼 파일 요소값을 MultipartFile 타입의 요소를 가진 리스트 컬렉션 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile06
		처리 : String registerFile06(List<MultipartFile> pictureList) throws Exception
		[*** 리스트로 가져오는 경우 null 발생]
		
		7. 여러 개의 파일 업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFileMember 타입의 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile07
		처리 : String registerFile07(MultiFileMember multiFileMember) throws Exception
		
		// 7-2)
		8. 여러개의 파일업로드를 폼 파일 요소값을 MultipartFileMember 타입의 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile07
		처리 : String registerFile07(MultiFileMember multiFileMember) throws Exception
		
		9. 파일업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFile 타입의 배열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile08
		처리 : String registerFile08(MultipartFile[] pictureList) throws Exception
		
	9. Ajax 방식 요청 처리
	
		1. URL 경로 상의 경로 변수값을 @PathVariable 어노테이션을 지정하여 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register/hongkd
		처리 : ResponseEntityMString> ajaxRegister01(@PathVariable("userId") String userId)
		
		2. URL 경로 상의 여러개의 경로 변수값을 @PathVariable 어노테이션을 지정하여 여러개의 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register/hongkd/pw01
		처리 : ResponseEntityMString> ajaxRegister02(@PathVariable("userId") String userId, 
											@PathVariable("password") String password)
											
		3. 객체 타입의 JSON 요청 데이터를 @RequestBody 어노테이션을 지정하여 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register03
		처리 : ResponseEntity<String> ajaxRegister03(@RequestBody Member member)
		
		4. 객체 타입의 JSON 요청 데이터는 문자열 매개변수로 처리할 수 없다.
		[요청과 처리]
		요청 : /ajax/register04
		처리 : ResponseEntity<String> ajaxRegister04(String userId)
		[실패!! 기본 타입으로는 데이터 받을 수 없음]
		
		5. 요청 URL 에 쿼리 파라미터를 붙여서 전달하면 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register05?userId=user01
		처리 : ResponseEntity<String> ajaxRegister05(String userId, String password)
		[넘겨받은 userId는 값을 받고, password는 값을 받지 못한다.]
		
		6. 객체 타입의 JSON 요청 데이터를 @PathVariable 어노테이션을 지정한 문자열 매개변수와 @ReuqestBody 어노테이션을 지정한 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register/hongkd
		처리 : ResponseEntity<String> ajaxRegister06(@PathVariable("userId") String userId, 
													@RequestBody Member member)
													
		7. 객체 배열 타입의 JSON 요청 데이터를 자바빈즈 요소를 가진 리스트 컬렉션 매개변수에 @RequestBody 어노테이션을 지정하여 처리한다.
		[요청과 처리]
		요청 : /ajax/register07
		처리 : ResponseEntity<String> ajaxRegister07(@RequestBody List<Member> memberList)
		
		8. 중첩된 객체 타입의 JSON 요청 데이터를 @RequestBody 어노테이션을 지정하여 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register08
		처리 : ResponseEntity<String> ajaxRegister07(@RequestBody Member member)
		
		9. 중첩된 객체 타입의 JSON 요청 데이터를 @RequestBody 어노테이션을 지정하여 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register09
		처리 : ResponseEntity<String> ajaxRegister07(@RequestBody Member member)
		
	10. 파일업로드 Ajax 방식 요청 처리
		
		1. Ajax 방식으로 전달한 파일 요소값을 스프링 MVC가 지원하는 MultipartFile 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/uploadAjax
		처리 : ResponseEntity<String> uploadAjax(MultipartFile file)
		> input type='file' change이벤트를 이용한 비동기 파일 업로드로 업로드 한 이미지가 서버로 넘어가고 결과값으로 'UPLOAD SUCCESS'를 얻어오면
		  img 태그에 preview 항목으로 내가 업로드한 이미지를 썸네일로 미리 볼 수 있는 기능을 구현
		  
┌──────────────────────
│	6장. 데이터 전달자 모델
└──────────────────────
		  
	1. 모델객체
		Model 객체는 뷰(View)에 컨트롤러에서 생성된 데이터를 담아서 전달하는 역할을 한다.
		
		1. Model 객체의 addAttribute() 메서드를 호출하여 데이터를 전달한다.
		[요청과 처리]
		요청 : /
		처리 : home(Locale locale, Model model)
			model.addAttribute("serverTime", formatterDate)
			
	2. 모델을 통한 데이터 전달
		Model 객체를 통해서 다양한 데이터를 뷰(View)에 전달할 수 있다.
		
		1. 매개변수에 선언된 Model 객체의 addAttribute() 메서드를 호출하여 데이터를 뷰(View)에 전달한다.
		[요청과 처리]
		요청 : /read01
		처리 : String read01(Model model)
			model.addAttribute("userId", "hongkd");
			model.addAttribute("password", "1234");
			model.addAttribute("email", "aaa@ccc.com");
			...
			
		2. Model 객체에 자바빈즈 클래스 객체를 값으로만 전달할 때는 뷰에서 참조할 이름을 클래스명의 앞글자를 소문자로 변환하여 처리한다.
		[요청과 처리]
		요청 : /read02
		처리 : String read02(Model model)
			model.addAttribute(member);
			
		3. Model 객체에 자바빈즈 클래스객체를 특정한 이름을 지정하여 전달할 수 있다.
		[요청과 처리]
		요청 : /read03
		처리 : String read03(Model model)
			model.addAttribute("user", member);
			
		4. Model 객체를 통해 배열과 컬렉션 객체를 전달할 수 있다.
		[요청과 처리]
		요청 : /read04
		처리 : String read04(Model model)
			model.addAttribute("carArray", carArray);
			model.addAttribute("carList", carList);
			...
			
		5. Model 객체를 통해 중첩된 자바빈즈 클래스 객체를 전달할 수 있다.
		[요청과 처리]
		요청 : /read05
		처리 : String read05(Model model)
			model.addAttribute("user", member);
			
		6. Model 객체를 통해 다양한 타입의 값을 전달할 수 있다.
		[요청과 처리]
		요청 : /read06
		처리 : String read06(Model model)
			model.addAttribute("user", member);
	
	3. @ModelAttribute 어노테이션
		@ModelAttribute 어노테이션은 전달받은 매개변수를 강제로 Model에 담아서 전달하도록 할 때 필요한 어노테이션이다.
		
		1. 기본 자료형은 매개변수로 선언하더라도 기본적으로 전달되지 않는다.
		[요청과 처리]
		요청 : /modelattribute/register01
		처리 : String register01(String userId)
			- 기본 타입의 매개변수는 페이지로 전달되지 않는다.
			
		2. 기본 자료형인 매개변수 @ModelAttribute 어노테이션을 지정하여 데이터를 전달한다.
		[요청과 처리]
		요청 : /modelattribute/register02
		처리 : String register02(@ModelAttribute("userId") String userId)
			-@ModelAttribute 어노테이션을 이용해서 데이터를 전달한다.
			
		3. 기본 자료형인 매개변수가 여러 개인 경우에 각각의 매개변수에 @ModelAttribute 어노테이션을 지정하여 데이터를 전달한다.
		[요청과 처리]
		요청 : /modelattribute/register03
		처리 : String register03(@ModelAttribute("userId") String userId, @ModelAttribute("password") String password)
		
		4. 자바빈즈 규칙에 맞는 객체는 매개변수로 선언하면 기본적으로 전달된다.
		[요청과 처리]
		요청 : /modelattribute/register04
		처리 : String register04(Member member)
		
		5. 자바빈즈 규칙에 맞는 객체는 매개변수로 선언하면 기본적으로 전달된다.
		[요청과 처리]
		요청 : /modelattribute/register05
		처리 : String register05(Member member)
		  	- Member 클래스 안에 있는 Address까지 출력 예시
		  
	4. RedirectAttributes 타입
		 RedirectAttributes는 일회성으로 데이터를 전달하는 용도로 사용된다.
		 
		 1. RedirectAttributes 객체에 일회성 데이터를 지정하여 전달한다.
		 [요청과 처리]
		 요청 : /redirectattribute/register
		 처리 : String register(Member member, RedirectAttributes redirectAttribute)
			 - 일회성으로 해당 페이지에서 넘어온 데이터를 다시 요청 할 시 데이터가 사라진다.
		  
┌──────────────────────
│	7장. JSP
└──────────────────────
	
	JSPHomeController
	home/home01, 02, 03
	
	1. 지시자
		지사자(directive)는 JSP 페이지에 대한 설정 정보를 지정할 때 사용한다.
		JSP가 제공하는 지시자에는 page 지시자, taglib 지시자, include 지시자로 세가지가 있다.
		
		1. page 지시자
		- JSP 페이지에 대한 정보를 지정한다.
		
				속성			|				설명
		───────────────────────────────────────────────────────────────		
			contentType		|	JSP가 생성할 문서의 MIME 타입과 문자 코드를 지정한다.
		───────────────────────────────────────────────────────────────
			pageEncoding	|	JSP 페이지 자체의 문자 코드를 지정한다.
		───────────────────────────────────────────────────────────────
			session			|	JSP 페이지가 세션을 사용할지의 여부를 지정한다.
		───────────────────────────────────────────────────────────────
			import			|	JSP 페이지에서 사용할 자바 클래스를 지정한다.
		───────────────────────────────────────────────────────────────
		
		[요청과 처리]
		요청 : /home01
		처리 : String home01(Locale locale, Model model)
		
		2. taglib 지시자
		- JSP 페이지에서 사용할 태그 라이브러리를 지정한다.
		
				속성		|				설명
		───────────────────────────────────────────────────────────────
			prefix		|	태그 라이브러리를 호출할 때 사용할 접두어를 지정한다.
		───────────────────────────────────────────────────────────────
			uri			|	TLD 파일이 위치한 URI 혹은 파일 경로를 지정한다.
		───────────────────────────────────────────────────────────────
		
		[요청과 처리]
		요청 : /home02
		처리 : String home02(Locale, locale, Model model)
		
		3. include 지시자
		- JSP 페이지의 특정 영역에 다른 문서를 포함한다.
		
			속성		|				설명
		───────────────────────────────────────────────────────────────
			file	|	포함할 파일의 경로를 지정한다.
		───────────────────────────────────────────────────────────────	  
		
		[요청과 처리]
		요청 : /home03
		처리 : String home03(Locale locale, Model model)
		
	2. 스크립틀릿
		스크립틀릿(Scriptlet)은 JSP페이지에서 자바 코드를 실행할 때 사용하는 코드의 블록이다
		스크립틀릿 코드 블록은 "<%"와 "%>" 사이, 그리고 "<%="와 "%>" 사이에 자바 코드를 포함할 수 있다.
		현재는 스크립틀릿을 사용하기 보다는 JSTL과 같은 커스텀 태그 라이브러리와 EL을 조합해서 JSP를 구현하는 방법을 많이 사용한다.
		
		[요청과 처리]		
		요청 : /home01
		처리 : String home01(Locale locale, Model model)
		> 리턴되는 페이지에서 'home/home01' 처리 : <%=serverTime %>으로 스크립틀릿 이용하여 데이터 출력
		
	3. 커스텀 태그 라이브러리
		스크립트 요소가 많아지면 많아질수록 JSP 코드는 복잡해집니다.
		이 문제를 해결하는 한 가지 방법은 커스텀 태그를 사용하는 것입니다.
		커스텀 태그를 사용하면 뷰를 표시하기 위한 로직을 공통화하거나, 표현하기 복잡한 로직을 캡슐화 할 수 있어서 JSP의 구현 코드를 간결하게 만들 수 있습니다.
		그리고, 커스텀 태그를 모아 놓은 것을 커스텀 태그 라이브러리라고 합니다.
		
		[대표적인 태그 라이브러리]
		
		JSTL(JavaServer Pages Standard Tag Library)
		- JSP 표준 태그 라이브러리
		ex) <c:out/>, <c:forEach/>, <c:set/> ... 등등
		
		spring-form JSP Tag Library
		- 스프링 MVC가 제공하는 HTML 폼용 태그 라이브러리
		- 나중에 스프링 폼에서 주로 사용됨
		ex) <form:form modelAttribute="member"></form:form>
			<form:input path="userId"/>
			<form:input path="password"/>
			<form:input path="userName"/>
			...
		
		spring JSP Tag Library
		- 스프링 MVC가 제공하는 범용 태그 라이브러리 및 EL 함수
		
		spring Security JSP Tag Library
		- 스프링 시큐리티가 제공하는 인증 및 인가용 태그 라이브러리
		- 나중에 스프링 시큐리티에서 주로 사용
		ex) <sec:authorize access="isAnonoymous()">
			</sec:authorize>
			
	[4 참고 소스] ------------------------------------------------------------
		Controller : JSPHomeController
		JSP : home/home0101 ~ home0401
	-----------------------------------------------------------------------
	
	4. 표현언어(EL)
		JSP는 EL(Expression Language)이라는 표현 언어를 사용해 값의 참조, 출력, 연산을 할 수 있습니다.
		EL식은 ${...} 또는 #{...} 형식으로 작성합니다.
		
		1. 객체 참조
		- EL을 사용하여 객체를 조회하는 방법은 다음과 같다.
			> 자바빈즈 프로퍼티를 조회하는 경우 "속성명.프로퍼티명"을 지정한다.
			> 리스트나 배열 요소를 조회하는 경우 "속성명[요소위치]"을 지정한다.
			> 맵 요소를 조회하는 경우 "속성명.키명" 또는 "속성명[키명]"을 지정한다.
		
		2. 사용 가능한 연산자
		- EL에서는 다음과 같은 연산자를 사용할 수 있다.
		
			# 산술 연산자
				+	|	-	|	*		|	/(div)	|	%(mov)	
			──────────────────────────────────────────────────
			더하기	|	뺴기	|	곱하기	|	나누기	|	나머지
			──────────────────────────────────────────────────	
			
			# 비교 연산자
			연산자	|		설명
			────────────────────────────────────────────
			==(eq)	|	같은 값인지 비교한다.
			────────────────────────────────────────────
			!=(ne)	|	다른 값인지 비교한다.
			────────────────────────────────────────────
			<=(le)	|	왼쪽이 작거나 같은 값인지 비교한다
			────────────────────────────────────────────
			>=(ge)	|	왼쪽이 크거나 같은 값인지 비교한다
			────────────────────────────────────────────
			<(lt)	|	왼쪽이 작은 값인지 비교한다
			────────────────────────────────────────────
			>(gt)	|	왼쪽이 큰 값인지 비교한다
			────────────────────────────────────────────
			
			# empty 연산자
			- null이거나 공백(문자열의 경우 공백 문자)인지 비교
			
			[true 조건:::]
			- null 값, 빈 문자열(""), 길이가 0인 배열, 빈 Collection
		
			# 논리 연산자
			연산자	|		설명
			───────────────────────────────────────────────────────────────────────────
			&&(and)	|	두 피연산자 모두 true이면 부울 값 true를 반환하고, 그렇지 않으면 false를 반환한다
			───────────────────────────────────────────────────────────────────────────
			||(or)	|	두 피연산자 중 하나 또는 모두 true이면 부울 값 true를 반환하고, 그렇지 않으면 false를 반환한다.
			───────────────────────────────────────────────────────────────────────────
			!(not)	|	해당 피 연산자의 의미를 반대로 바꾼다
			───────────────────────────────────────────────────────────────────────────
			
	[5,6 참고 소스]---------------------------------------------------
		Controller : JSPTagHomeController
		JSP : home/jsptag/*
	---------------------------------------------------------------
	
	5. 표준 태그 라이브러리(JSTL)
		많은 개발자들이 JSP에서 코드를 깔끔하게 작성하기 위해서 커스텀 태그를 만들어왔는데, 이런 중복되는 노력을 없애기 위해서 나온 것이 바로 JSTL입니다.
		
		1. core 태그 라이브러리
		
			요소				|							설명
		───────────────────────────────────────────────────────────────────────────
			<c:out>			|	JspWriter에 값을 적절하게 처리한 후에 출력한다.
		───────────────────────────────────────────────────────────────────────────
			<c:set>			|	JSP에서 사용할 변수를 설정합니다.(값에 따른 변수 설정)
		───────────────────────────────────────────────────────────────────────────
			<c:remove>		|	설정한 변수를 제거한다.
		───────────────────────────────────────────────────────────────────────────
			<c:catch>		|	예외를 처리한다.
		───────────────────────────────────────────────────────────────────────────
			<c:if>			|	조건을 지정하고 지정된 조건과 일치하는 처리 내용을 구현한다.
		───────────────────────────────────────────────────────────────────────────
			<c:choose>		|	여러 조건을 처리할 때 사용한다.
		───────────────────────────────────────────────────────────────────────────
			<c:when>		|	여러 조건을 지정하고 지정한 조건과 일치하는 처리 내용을 구현한다. <c:choose> 요소에서 사용한다.
		───────────────────────────────────────────────────────────────────────────
			<c:otherwise>	|	<c:when> 요소에서 지정한 조건에 모두 일치하지 않을 때 처리할 내용을 구현한다.
							|	<c:choose> 요소에서 사용한다.
		───────────────────────────────────────────────────────────────────────────
			<c:forEach>		|	컬렉션이나 배열의 각 항목을 처리할 때 사용한다.
		───────────────────────────────────────────────────────────────────────────
			<c:forTokens>	|	구분자로 구분된 각각의 토큰을 처리할 때 사용한다.
		───────────────────────────────────────────────────────────────────────────
			<c:import>		|	URL을 사용하여 다른 자원을 삽입한다.
		───────────────────────────────────────────────────────────────────────────
			<c:url>			|	URL을 재작성한다.
		───────────────────────────────────────────────────────────────────────────
			<c:redirect>	|	지정한 URL에 리다이렉트한다.
		───────────────────────────────────────────────────────────────────────────
			<c:param>		|	파라미터를 지정한다.
		───────────────────────────────────────────────────────────────────────────
		[taglib 지시자 사용 모습 ::: <%@ taglib url="http://java.sun.com/jsp/jstl/core" prefix="c" %>]
		
		2. fmt 태그 라이브러리
		
				요소			|			설명
		─────────────────────────────────────────────────────────────────────────────────
		<fmt:formatNumber>	|	숫자를 형식화한다.
		─────────────────────────────────────────────────────────────────────────────────
		<fmt:parseNumber>	|	문자열을 숫자로 변환한다.
		─────────────────────────────────────────────────────────────────────────────────
		<fmt:formatDate>	|	Date 객체를 문자열로 변환한다.
		─────────────────────────────────────────────────────────────────────────────────
		<fmt:parseDate>		|	문자열을 Date객체로 변환한다.
		─────────────────────────────────────────────────────────────────────────────────
		[taglib 지시자 사용 모습 ::: <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>]
		
		3. function 태그 라이브러리
		
				요소					|			설명
		─────────────────────────────────────────────────────────────────────────────────
			<fn:contains>			|	지정한 문자열이 포함되 있는지 판단한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:containsIgnoreCase>	|	지정한 문자열이 대문자/소문자를 구분하지 않고 포함돼 있는지 판단한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:startsWith>			|	지정한 문자열로 시작하는지 판단한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:endsWith>			|	지정한 문자열로 끝나는지 판단한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:indexOf>			|	지정한 문자열이 처음으로 나왔을 때의인텍스를 구한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:length>				|	컬렉션 또는 배열의 요소 개수, 문자열 길이를 구한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:escapeXml>			|	지정한 문자열을 XML 구문으로 해석되지 않도록 이스케이프한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:replace>			|	문자열을 치환한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:toLowerCase>		|	문자열을 소문자로 변환한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:toUpperCase>		|	문자열을 대문자로 변환한다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:trim>				|	문자열 양 끝을 trim한다.(공백 제거)
		─────────────────────────────────────────────────────────────────────────────────
			<fn:substring>			|	지정한 범위에 해당하는 문자열을 잘라낸다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:substringAfter>		|	지정한 문자열에서 일치하는 이후의 문자열을 잘라낸다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:substringBefore>	|	지정한 문자열에 일치하는 이전의 문자열을 잘라낸다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:join>				|	문자열 배열을 결합해서 하나의 문자열을 만든다.
		─────────────────────────────────────────────────────────────────────────────────
			<fn:split>				|	문자열을 구분자로 분할해서 문자열 배열을 만든다.
		─────────────────────────────────────────────────────────────────────────────────
		[taglib 지시자 사용 모습 ::: <%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>]
		
	6. 코어 태그
	조건분기나 반복처리 그리고 변수의 지정 등과 같이 논리적인 처리를 위해 사용되는 스크립트 코드를 대체하기 위한 태글르 제공한다.
	
		1. <c:out>
		JspWriter에 값을 적절하게 처리한 후에 출력한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			value		|	Object	|	출력할 값
		───────────────────────────────────────────────────
			escapeXml	| 	boolean	|	특수 문자를 변환할지의 여부
		───────────────────────────────────────────────────
			default		|	Object	|	value의 결과값이 null인 경우 출력할 값
		───────────────────────────────────────────────────
		
		2. <c:set>
		JSP에서 사용할 변수를 설정한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			var			|	String	|	EL 변수 이름
			value		|	Object	|	변수에 할당 할 값
			scope		|	String	|	변수를 생성할 영역, 기본값은 page
			target		|	Obejct	|	프로퍼티 값을 설정할 객체 지정
			property	|	String	|	프로퍼티 이름
		───────────────────────────────────────────────────
		
		3. <c:remove>
		설정한 변수를 제거한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			var			|	String	|	삭제할 EL 변수 이름
			scope		|	String 	|	삭제할 변수가 포함된 영역		
		───────────────────────────────────────────────────
		
		4. <c:catch>
		예외를 처리한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			var			|	String	|	예외를 저장할 EL 변수 이름
		───────────────────────────────────────────────────
		
		5. <c:if>
		조건을 지정하고 지정된 조건과 일치하는 처리 내용을 구현한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			test		|	boolean	|	검사 조건
			var			|	String	|	검사 조건의 계산 결과값을 저장할 EL 변수
			scope		|	String	|	삭제할 변수가 포함된 영역
		───────────────────────────────────────────────────
		
		6. <c:choose>
		여러 조건을 처리할 때 사용한다.
		
		7. <c:when>
		여러 조건을 지정하고 지정한 조건과 일치하는 처리 내용을 구현한다.
		<c:choose> 요소에서 사용한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			test		|	boolean	|	출력할 값
		───────────────────────────────────────────────────
		
		8. <c:otherwise>
		<c:when> 요소에서 지정한 조건에 모두 일치하지 않을 때 처리할 내용을 구현한다.
		<c:choose> 요소에서 사용한다.
		
		9. <c:forEach>
		컬렉션이나 배열의 각 항목을 처리할 때 사용한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			var			|	boolean	|	몸체에서 사용할 EL 변수 이름
			items		|	String	|	반복 처리할 데이터
			varStatus	|	String	|	루프 상태를 저장할 EL 변수 이름
			begin		|	String	|	시작 인덱스 값
			end			|	String	|	끝 인덱스 값
			step		|	String	|	인덱스 증분 값
		───────────────────────────────────────────────────
		
		10. <c:forTokens>
		구분자로 구분된 각각의 토큰을 처리할 때 사용한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			var			|	boolean	|	몸체에서 사용할 EL 변수 이름
			items 		|	String	|	구분자로 구분 처리할 데이터
			delims		|	String	|	구분자
			varStatus	|	String	|	루프 상태를 저장할 EL 변수 이름
			begin		|	String	|	시작 인덱스 값
			end			|	String	|	끝 인덱스 값
			step		|	String	|	인덱스 증분 값
		───────────────────────────────────────────────────
		
		11. <c:import>
		URL을 사용하여 다른 자원을 삽입한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			url			|	boolean	|	읽어올 URL
			var			|	boolean	|	읽어온 결과를 저장할 변수 이름
			scope		|	boolean	|	변수를 저장할 영역
			charEncoding|	boolean	|	결과를 읽어올 때 사용할 캐릭터 인코딩
		───────────────────────────────────────────────────
		
		url 속성값의 두 가지 타입
		- 절대 URL : 완전한 URL입니다.(ex) http://news.naver.com/main/123
		- 상대 URL : 
			> 웹 애플리케이션 내에서의 절대 경로 : 슬래시(/)로 시작합니다.  (ex) /board/list.jsp
			> 현재 JSP에 대한 상대 경로 : 슬래시(/)로 시작하지 않는다.  (ex) ../board/list.jsp
			
		12. <c:url>
		URL을 재작성한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			value		|	boolean	|	읽어올 URL
			var			|	boolean	|	읽어올 결과를 저장할 변수 이름
			scope		|	boolean	|	변수를 저장할 영역
		───────────────────────────────────────────────────
		
		value 속성값의 두 가지 타입
		- 절대 URL : 완전한 URL입니다.(ex) http://news.naver.com/main/123
		- 상대 URL : 
			> 웹 애플리케이션 내에서의 절대 경로 : 슬래시(/)로 시작합니다.  (ex) /board/list.jsp
			> 현재 JSP에 대한 상대 경로 : 슬래시(/)로 시작하지 않는다.  (ex) ../board/list.jsp
		웹 애플리케이션 내에서의절대 경로를 사용할 경우 실제로 생성되는 URL은 컨텍스트 경로를 포함합니다.
		
		13. <c:redirect>
		지정한 URL에 리다이렉트합니다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			url			|	boolean	|	리다이렉트 할 URL
			context		|	boolean	|	컨텍스트 경로
		───────────────────────────────────────────────────
		
		14. <c:param>
		파라미터를 지정한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			name		|	boolean	|	파라미터 이름
			value		|	boolean	|	파라미터 값
		───────────────────────────────────────────────────
	
	7. 숫자 및 날짜 포맷팅 처리 태그
	숫자 및 날짜의 포맷팅과 관련된 태그이다.
	
		1. <fmt:formatNumber>
		숫자를 형식화한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			value		|	String of Number	| 서식에 맞춰 출력할 숫자
			type		|	String	|	어떤 서식으로 출력할지를 정한다
			pattern		|	String	|	직접 숫자를 출력할 서식을 지정한다
			var 		|	String	|	포맷팅한 결과를 지정할 변수 이름
		───────────────────────────────────────────────────
		
		type 속성 : number일 경우 숫자 형식으로, percent일 경우 % 형식으로, currency일 경우 통화 형식으로 출력한다.
		기본값은 number입니다.
		
		2. <fmt:parseNumber>
		문자열을 숫자로 변환한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			value		|	String	|	파싱할 문자열
			type		|	String	|	value 속성의 문자열 타입을 지정
			pattern		|	String	|	파싱할 때 직접 사용할 서식을 지정한다
			var			|	String	|	파싱한 결과를 저정할 변수 이름을 지정한다
		───────────────────────────────────────────────────
		
		type 속성 : number, currency, percent가 올 수 있다.
		기본값은 number입니다.
		
		3. <fmt:formatDate>
		Date 객체를 문자열로 변환한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			value		|	java.util.Date	|	포맷팅할 날짜 및 시간 값
			type		|	String	|	날짜, 시간 또는 둘 다 포맷팅 할지의 여부를 지정한다.
			dateStyle	|	String	|	날짜에 대해 미리 정의된 포맷팅 스타일을 지정한다.
			timeStyle	| 	String	|	시간에 대해 미리 정의된 포맷팅 스타일을 지정한다.
			pattern		|	String	|	파싱할 때 직접 사용할 서식을 지정한다.
			var			|	String	|	파싱한 결과를 저장할 변수 이름을 지정한다
		───────────────────────────────────────────────────
		
		type 속성 : time, date, both 중 한 가지 값을 가질 수 있으며 기본값은 date입니다.
		dateStyle : default, short, medium, long, full 중 한가지 값을 가질 수 있으며, 기본값은 default입니다.
		timeStyle : default, short, medium, long, full 중 한가지 값을 가질 수 있으며, 기본값은 default입니다.
		
		4. <fmt:parseDate>
		문자열을 Date 객체로 변환한다.
			속성			|	타입		|	설명
		───────────────────────────────────────────────────
			value		|	String	|	파싱할 문자열
			type		|	String	|	날짜, 시간 또는 둘 다 포맷팅 할지의 여부를 지정한다.
			dateStyle	|	String	|	날짜에 대해 미리 정의된 포맷팅 스타일을 지정한다.
			timeStyle	|	String	|	시간에 대해 미리 정의된 포맷팅 스타일을 지정한다.
			pattern		|	String	|	파싱할 때 직접 사용할 서식을 지정한다.
			var			|	String	|	파싱한 결과를 저장할 변수 이름을 지정한다.
		───────────────────────────────────────────────────
		
		type 속성 : time, date, both 중 한 가지 값을 가질 수 잇으며 기본값은 date입니다.
		dateStyle : default, short, medium, long, full 중 한가지 값을 가질 수 있으며, 기본값은 default입니다.
		timeStyle : default, short, medium, long, full 중 한가지 값을 가질 수 있으며, 기본값은 default입니다.
		
	[7 참고 소스]------------------------------------------------
		Controller : JSPELController
		JSP : home/el
	----------------------------------------------------------
	
	8. EL 함수
	JSTL은 표현 언어(EL)에서 사용할 수 있는 함수를 제공한다.
	
		1. EL 함수 목록
		
			fn:contains(str1, str2)
				> 지정한 문자열이 포함돼 있는지 판단합니다.
			
			fn:containsIgnoreCase(str1, str2)
				> 지정한 문자열이 대문자/소문자를 구분하지 않고 포함돼 있는지 판단합니다.
				
			fn:startsWith(str1, str2)
				> 지정한 문자열로 시작하는지 판단합니다.
				
			fn:endsWith(str1, str2)
				> 지정한 문자열로 끝나는지 판단합니다.
				
			fn:indexOf(str1, str2)
				> 지정한 문자열이 처음으로 나왔을 때의 인덱스를 구합니다.
				
			fn:length(obj)
				> 컬렉션 또는 배열의 요소 개수, 문자열 길이를 구합니다.
				
			fn:escapeXml(str)
				> 지정한 문자열을 XML 구문으로 해석되지 않도록 이스케이프합니다.
				
			fn:replace(str, src, dest)
				> 문자열을 치환합니다.
				
			fn:toLowerCase(str)
				> 문자열을 소문자로 변환합니다.
				
			fn:toUpperCase(str)
				> 문자열을 대문자로 변환합니다.
				
			fn:trim(str)
				> 문자열 양 끝 공백을 제거합니다(문자열 가운데 공백들은 안사라짐...)
			
			fn:substring(str, idx1, idx2)
				> 지정한 범위에 해당하는 문자열을 잘라낸다.
			
			fn:substringAfter(str1, str2)
				> 지정한 문자열에 일치하는 이후의 문자열을 잘라낸다.
				
			fn:substringBefore(str1, str2)
				> 지정한 문자열에 일치하는 이전의 문자열을 잘라낸다.
				
			fn:join(array, str)
				> 문자열을 구분자로 분할해서 하나의 문자열로 만듭니다.
				
			fn:split(str1, str2)
				> 문자열을 구분자로 분할해서 문자열 배열을 만듭니다.
		
┌──────────────────────
│	8장. 스프링 폼 태그
└──────────────────────
		
	1. 스프링 폼 태그 라이브러리
		
		스프링 폼 HTML 폼을 표시하기 위한 태그 라이브러리이다.
		스프링 폼을 이용하면 HTML 폼과 자바 객체를 쉽게 바인딩할 수 있다.
		
		스프링 폼 커스텀 태그 목록
		
		<form:form>
			> 폼 요소를 생성한다.
		<form:input>
			> 텍스트 필드 요소를 생성한다.
		<form:password>
			> 패스워드 필드 요소를 생성한다.
		<form:textarea>
			> 텍스트 영역 요소를 생성한다.
		<form:checkboxes>
			> 여러 개의 체크박스 요소를 생성한다.
		<form:checkbox>
			> 체크박스 요소를 생성한다.
		<form:radiobuttons>
			> 여러 개의 라디오 버튼 요소를 생성한다.
		<form:radiobutton>
			> 라디오 버튼 요소를 생성한다.
		<form:select>
			> 셀렉트 박스 요소를 생성한다.
		<form:hidden>
			> 숨겨진 필드 요소를 생성한다.
		<form:label>
			> 라벨 요소를 생성한다.
		<form:button>
			> 버튼 요소를 생성한다.
		<form:errors>
			> 입력값 검증 오류를 표시한다.
			
		스프링 폼 태그 라이브러리 선언
		[ <%@ taglib uri="http://www.springframework.org/tags/form" %> ]	
		
	2. 폼 요소
		
		HTML 폼을 출력하려면 <form:form> 요소를 사용한다.
		
			*** jsp에서 form:form modelAttribute의 속성 값과 서버 컨트롤러 메소듸 model.addAttrribute의 속성명이 같은상태로 연결이 
			되어 있어야 페이지 에러가 발생하지 않는다.
			
			1. 모델에 폼 객체를 추가하지 않으면 에러가 발생한다.
			[요청과 처리]
			요청 : /formtag/registerForm01_Error
			처리 : String registerForm01_Eeror(Model model)
			
			2. 폼 객체의 속성명과 스프링 폼 태그의 modelAttribute 속성값이 일치해야 한다.
			[요청과 처리]
			요청 : /formtag/registerForm02
			처리 : String registerForm01(Model model)
			
			3. 폼 객체의 속성명과 스프링 폼 태그의 modelAttribute 속성값이 일치하지 않으면 에러가 발생한다.
			[요청과 처리]
			요청 : /formtag/registerForm03
			처리 : String registerForm03(Model model)
				model.addAttribute("user", new Member());
				
			4. 폼 객체의 속성명과 스프링 폼 태그의 modelAttribute 속성값이 일치해야한다.
			[요청과 처리]
			요청 : /formtag/registerForm04
			처리 : String registerForm04(Model model)
				model.addAttribute("user", new Member());
				
			5. 컨트롤러 메서드의 매개변수로 자바빈즈 객체가 전달이 되면 기본적으로 다시 화면으로 전달된다.
			[요청과 처리]
			요청 : /formtag/registerForm05
			처리 : String registerForm05(Member member)
				자바빈즈 클래스를 바로 넘기기 때문에 model로 넘기지 않아도 설정 가능 				
		
			6. 폼 객체의 속성명은 직접 지정하지 않으면 폼 객체의 클래스명의 맨처음 문자를 소문자로 변환하여 처리한다.
			[요청과 처리]
			요청 : /formtag/registerForm06
			처리 : String registerForm06(Member user)
				자바빈즈 클래스명의 앞자리가 소문자로 변경되 넘어간다.
				매개변수로 설정되어 있는 Member 클래스가 넘어갈때 member로 변경되서 넘어감
				
			7. @ModelAttribute 어노테이션으로 폼 객체의 속성명을 직접 지정할 수 있다.
			[요청과 처리]
			요청 : /formtag/registerForm07
			처리 : String registerForm07(@ModelAttribute("user") Member member)
				modelAttribute 속성값이 폼 객체의 속성명과 일치하지 않으면 에러가 발생한다.
				
			8. @ModelAttribute 어노테이션으로 폼 객체의 속성명을 직접 지정할 수 있다.
			[요청과 처리]
			요청 : /formtag/registerForm08
			처리 : String registerForm08(@ModelAttribute("user") Member member)
			
			9. 폼 객체의 프로퍼티에 값을 지정하여 모델을 통하여 전달한다.
			[요청과 처리]
			요청 : /formtag/registerForm09
			처리 : String registerForm09(Model model)
				model.addAttribute("member", member)
				
			결과) registerFirm01 - 09에서 action으로 설정된 결과 페이지 처리부
			[요청과 처리]
			요청 : /formtag/registerForm01-09 (결과를 요청하기 위한 폼 페이지)
				 /formtag/register
			처리 : String	register(Member member, Model model)
				model.addAttribute("member", member);
				
			*** form:form 태그를 사용하면서 핵심은 modelAttribute에 설정한 자바빈즈 객체의 속성명과
				서버 컨트롤러 메소드에서 매개변수로 전달받은 자바빈즈 클래스를 해당 페이지로 전송하는 방법,
				또는 Model이라는 전달자를 통해서 modelAttribute에 설정한 자바빈즈 객체의 속성명과 동일한
				속성명으로 전달해줘야 한다는 점이다!
				
				해당 속성명을 달리해서 주고자 할때는 Model이라는 전달자를 통해서 키 자리에 값을 원하는 속성명으로 주되
				JSP단에서 form:form 태그의 modelAttribute 속성 값 또한 같은 속성명으로 설정해주어야함을 
				잊지말도록 하자!
				
	3. 폼 항목의 공통 속성
		
		HTML 폼 항목을 출력하기 위한 태그 라이브러리에는 몇 가지 공통 속성이 있습니다.
		
			path
			- 폼 항목에 바인딩되는 폼 객체의 프로퍼티를 지정합니다.
			
			disable
			- 폼 항목을 비활성화할지 여부를 지정합니다.
			- (기본값은 false입니다.)
			
			readonly
			- 폼 항목을 읽기 전용으로 만들지 여부를 지정합니다.
			- (기본값은 false입니다.)
			
			*** disable & readonly 속성
				우리가 input type="text"의 값을 disable하거나 readonly 한 후에 form의 submit요소를 이용해서
				해당 action에 설정한 경로로 데이터를 보냈을때, disable한 후 데이터를 보내는것과, readonly한 후에 데이터를 보내는데에는
				차이가 있습니다. disable한 후 데이터를 보냈을때 데이터가 넘어가지 않고 readonly했을때는 데이터가 넘어갑니다.
				그렇지만 disable이라는 속성을 이용하여 해당 input 요소들을 가용해야만 한다면, input type="hidden" 이라는 타입을 이용해서
				disable된 input 요소의 값과 name을 명시해서 action에 설정된 해당 경로로 데이터가 정상적으로 잘넘어갈수 있도록 조치합니다.
			
	4. 텍스트 필드 요소
	
		HTML 텍스트 필드를 출력하려면 <form:input> 요소를 사용한다.
		
			Controller : JSPFormTextFieldTagController
			JSP : form/textfield/~~~~~~
			
			1. 모델에 기본 생성자로 생성한 폼 객체를 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/textfield/registerForm01
			처리 : String registerForm01(Model model)
				model.addAttribute("member", new Member()); 
		
			2. 폼 객체를 생성하여 값을 설정한 후에 전달한다.
			[요청과 처리]
			요청 : /formtag/textfield/registerForm02
			처리 : String registerForm02(Model model)
				model.addAttribute("member", member)
				
	5. 패스워드 필드 요소
		
		HTML 패스워드 필드를 출력하려면 <form:password> 요소를 사용한다.
		
			Controller : JSPFormPasswordTagController
			JSP : form/password/~~~~~~
			
			1. 모델에 기본 생성자로 생성한 폼 객체를 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/password/registerForm01
			처리 : String registerForm01(Model model)
				model.addAttribute("member", new Member())
				
				*** 값을 설정해서 뷰에 전달하더라도 패스워드 필드에 반영되지 않는다.
				
			2. 폼 객체를 생성하여 값을 설정한 후에 전달한다.
			[요청과 처리]
			요청 : /formtag/password/registerForm02
			처리 : String registerForm02(Model model)
				model.addAttribute("member", member)
				
				*** 값을 설정해서 뷰에 전달하더라도 패스워드 필드에 반영되지 않는다.
				
	6. 텍스트 영역 요소
	
		HTML 텍스트 영역을 출력하려면 <form:textarea> 요소를 사용한다.
		
			Controller : JSPFormTextareaTagController
			JSP : form/textarea/~~~~~
			
			1. 모델에 기본 생성자로 생성한 폼 객체를 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/textarea/registerForm01
			처리 : String registerForm01(Model model)
				model.addAttribute("member", new Member())
				
			2. 폼 객체를 생성하여 값을 설정한 후에 전달한다.
			[요청과 처리]
			요청 : /formtag/textarea/registerForm02
			처리 : String registerForm02(Model model)
				model.adAttribute("member", member)
				
	7. 여러 개의 체크박스 요소
	
		HTML 여러 개의 체크박스를 출력하려면 <form:checkboxes> 요소를 사용한다.
		
			Controller : JSPFormCheckboxesTagController
			JSP : form/checkboxes/~~~~~
			
			1. 모델에 Map 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/checkboxes/registerForm01
			처리 : String registerForm01(Model model)
				model.addAttribute("hobbyMap", hobbyMap)
				model.addAttribute("member", member)
				
				*** Map으로 데이터를 보내게 되면, JSP단에서 Map에 설정된 키, 값대로만 설정해야 하므로 어느정도 제한이 있다.
					그래서 CodeValue 객체를 만들어서 value,label과 같은 값을 자유롭게 가용할 수 있도록 한다.
					
			2. 모델에 List 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/checkboxes/registerForm02
			처리 : String registerForm02(Model model)
				model.addAttribute("hobbyCodeList", hobbyCodeList)
				model.addAttribute("member", member)	
				
				*** List에 한행 한행씩 CodeValue 객체를 셋팅해서 넣었다(총 데이터 3개)
					List안에 CodeValue객체로 들어있는 객체 내 필드들 label, value를 이용해서 내가 만들고자 하는 컴포넌트의 value와 label값을 자유롭게
					수정하고 위치를 바꿔 변경할 수 있다.
					
	8. 체크박스 요소
		
		HTML 체크박스를 출력하려면 <form:chekcbox> 요소를 사용한다.
		
			Controller : JSPFormCheckboxTagController
			JSP : form/checkbox/~~~~~~
			
			1. 모델에 기본생성자로 생성한 폼 객체를 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/checkbox/registerForm01
			처리 : String registerForm01(Model model)
				model.addAttribute("member", new Member())
			
			2. 객체를 생성하여 값을 설정한 후 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/checkbox/registerForm02
			처리 : String registerForm02(Model model)
				model.addAttribute("member", member)
			
			3. 결과
			[요청과 처리]
			요청 : /formtag/checkbox/result
			처리 : String registerResult(Member member, Model model)
				model.addAttribute("member", member)
		
	9. 여러 개의 라디오 버튼 요소
		
		HTML 여러 개의 라디오 버튼을 출력하려면 <form:radiobuttons> 요소를 사용한다.
		
			Controller : JSPFormRadioTagController
			JSP : form/radio/~~~~~
			
			1. 모델에 Map타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/radio/regisgerFormRadios01
			처리 : String registerFormRadios01(Model model)
				model.addAttribute("genderCodeMap", genderCodeMap)
				model.addAttribute("member", new Member())
				
			2. 모델에 List 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/radio/registerFormRadios02
			처리 : String registerFormRadios02(Model model)
				model.addAttribute("genderCodeList", genderCodeList)
				model.addAttribute("member", new Member())
		
			3. 결과
			[요청과 처리]
			요청 : /formtag/radio/result
			처리 : String registerFormRadiosResult(Member member, Model model)
				model.addAttribute("gender", member.getGender())
		
	10. 라디오 버튼 요소
	
		HTML 라디오 버튼을 출력하려면 <form:radiobutton> 요소를 사용한다.
		
			Controller : JSPFormRadioTagController
			JSP : form/radio/~~~~~
			
			1. 모델에 기본생성자로 생성한 폼 객체를 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/radio/registerFormRadio01
			처리 : String registerFormRadio01(Model model)
				model.addAttribute("member", new Member())
				
			2. 객체를 생성하여 값을 설정한 후 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/radio/registerFormRadio02
			처리 : String registerFormRadio02(Model model)
				model.addAttribute("member", member)
				
			3. 결과
			[요청과 처리]
			요청 : /fromtag/radio/result2
			처리 : String registerFormRadioResult2(Member member, Model model)
				model.addAttribute("member", member)
		
	11. 셀렉트 박스 요소
		
		HTML 셀렉트 박스를 출력하려면 <form:select> 요소를 사용한다.
		
			Controller : JSPFormSelectboxTagController
			JSP : form/selectbox/~~~~~~
			
			1. 모델에 Map타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/selectbox/registerFormSelectbox01
			처리 : String registerFormSelectbox01(Model model)
				model.addAttribute("nationalityCodeMap", nationalityCodeMap)
				model.addAttribute("member", new Member())
				
			2. 모델에 List 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/selectbox/registerFormSelectbox02
			처리 : String registerFormSelectbox02(Model model)
				model.addAttribute("nationalityCodeList", nationalityCodeList)
				model.addAttribute("member", new Member())
				
			3. 모델에 Map 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/selectbox/registerFormSelectbox03
			처리 : String registerFormSelectbox03(Model model)
				model.addAttribute("carCodeMap", carCodeMap)
				model.addAttribute("member", new Member())
				
			4. 모델에 CodeLabelValue 타입의 요소를 가지는 List 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/selectbox/registerFormSelectbox04
			처리 : String registerFormSelectbox04(Model model)
				model.addAttribute("carCodeList", carCodeList)
				model.addAttribute("member", new Member())
		
			5. 모델에 CodeLabelValue 타입의 요소를 가지는 List 타입의 데이터를 생성하여 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/selectbox/registerFormSelectbox05
			처리 : String registerFormSelectbox05(Model model)
				model.addAttribute("carCodeList", carCodeList)
				model.addAttribute("member", new Member())
				
			6. 결과
			[요청과 처리]
			요청 : /formtag/selectbox/result
			처리 : String registerFormSelectboxResult(Member member, Model model)
				model.addAttribute("nationality", member.getNationality())
		
			7. 결과2
			[요청과 처리]
			요청 : /formtag/selectbox/result2
			처리 : String registerFormSelectboxResult2(Member member, Model model)
				model.addAttribute("carList", carList)
				
	12. 숨겨진 필드 요소
		
		HTML 숨겨진 필드를 출력하려면 <form:hidden> 요소를 사용한다.
		
			Controller : JSPFormHiddenTagController
			JSP : form/hidden/~~~~~
			
			1. 객체를 생성하여 값을 설정한 후 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/hidden/registerFormHidden01
			처리 : String registerFormHidden01(Model model)
				model.addAttribute("member", member)
				
			2. 결과
			[요청과 처리]
			요청 : /formtag/hidden/result2
			처리 : String registerFormHiddenResult(Member member, Model model)
			
	13. 라벨 요소
	
		HTML 라벨을 출력하려면 <form:label> 요소를 사용한다.
		
			Controller : JSPFormLabelTagController
			JSP : /form/label/~~~~
			
			1. 모델에 기본 생성자로 생성한 폼 객체를 추가한 후에 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/label/registerFormLabel01
			처리 : String registerFormLabel01(Model model)
				model.addAttribute("member", new Member())
				
			2. 객체를 생성하여 값을 설정한 후 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/label/registerFormLabel02
			처리 : String registerFormLabel02(Model model)
				model.addAttribute("member", member)
		
			3. 결과
			[요청과 처리]
			요청 : /formtag/label/result
			처리 : String registerFormLabelResult(Member member, Model model)
				*** 자바빈즈 클래스 객체를 매개변수로 받아서 model 전달자 없이 보낼 수 있기 때문에
					아래 내용을 꼭 명시 하지 않아도 됨
					model.addAttribute("member", new Member())
					
	14. 버튼 요소
		
		HTML 버튼을 출력하려면 <form:button> 요소를 사용한다.
		
			Controller : JSPFormButtonTagController
			JSP : form/button/~~~~~
			
			1. 객체를 생성하여 값을 설정한 후 화면에 전달한다
			[요청과 처리]
			요청 : /formtag/button/registerFormButton01
			처리 : String registerFormButton01(Model model)
				model.addAttribute("member", member)
				
			2. 결과
			[요청과 처리]
			요청 : /formtag/button/result
			처리 : String registerFormButtonResult(Member member, Model model)
			
	15. 입력값 검증 에러
	
		입력값 검증 에러를 출력하려면 <form:errors> 요소를 사용한다
		
			Controller : JSPFormValidationController
			JSP : form/validation/~~~~~
			
			1. 객체를 생성하여 값을 설정한 후 화면에 전달한다.
			[요청과 처리]
			요청 : /formtag/validaion/registerFormValidatin01
			처리 : String registerFormValidation01(Model model)
				model.addAttribute("member", member)
				
			2. 결과
			[요청과 처리]
			요청 : /formtag/validaion/result
			처리 : String registerFormValidationResult(Member member)
				model.addAttribute("member", member)
				
			*** form:error 만으로는 입력값 검증을 마무리 할 수 없다.
			*** validation 역할자가 꼭 필요함
			
			클라이언트에서 서버로 modelAttribute에서 바인딩 할 객체를 설정하고 아이디, 이름, 이메일 등등의 데이터를 입력 누락 시킨 후
			서버로 요청했을때, form:errors에 담길 메세지는 바인딩되지만, 바인딩 됬다고 출력을 위한 validation 역할자가 없기 때문에 
			없는채로 결과 페이지가 요청된다.
			
			끝!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
┌──────────────────────
│	9장. 입력 유효성 검증
└──────────────────────
	
	1. 입력값 검증
		
		스프링 MVC는 Bean Validation 기능을 이용해 요청 파라미터 값이 바인딩된 도메인 클래스(또는 커맨드 클래스)의 입력값 검증을 한다.
		
		환경 설정
		
			의존관계 정의
			- 입력 값 검증을 위한 의존 라이브러리를 추가한다.
			<!-- 입력값을 검증하기 위한 라이브러리 의존 관계 정의 -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-validation</artifactId>
				<version>5.4.2.Final</version>
			</dependency>
			
			pom.xml에 추가한다.
			프로젝트 Maven Update를 진행하여 라이브러리 등록을 업데이트한다.
			
			*** 프로젝트 Maven 업데이트를 하지 않는 경우, 라이브러리 등록이 잘 이뤄지지 않는 경우가 있기 때문에
				꼭 하도록 합시다!!! 
				
			입력값 검증 활성화
			입력값 검증을 하기 위해서는 메서드 매개변수에 도메인 클래스를 정의하고 @Validated를 지정한다.
			입력값 검증 대상의 도메인 클래스 직후에 BindingResult를 정의한다.
			bindingResult에는 요청 데이터의 바인딩 오류와 입력값 검증 오류 정보가 저장된다.
			
				*** @Validated 어노테이션을 지정하여 입력값 검증 기능을 활성화한다.
		
	[1 참고 소스] -------------------------------------------------
		Controller : ValidationController
		JSP : validation/*
	------------------------------------------------------------
	
	2. 입력값 검증 결과
	
		입력값 검증 대상의 도메인 클래스 직후에 BindingResult를 정의한다.
		BindingResult에는 요청 데이터의 바인딩 에러와 입력값 검증 에러 정보가 저장된다.
		
		에러 정보 확인을 위한 BindingResult 메서드
		
			hasError()
			- 에러가 발생한 경우 true를 반환한다.
			hasGlobalErrors()
			- 객체 레벨의 에러가 발생한 경우 true를 반환한다.
			hasFieldError()
			- 필드 레벨의 에러가 발생한 경우 true를 반환한다.
			hasFieldErrors(String)
			- 인수에 지정한 필드에서 에러가 발생한 경우 true를 반환한다.
			
	[2 참고 소스] ---------------------------------------------------
		Controller : ValidationController
		JSP : validation/*
	--------------------------------------------------------------
	
	3. 입력값 검증 규칙
	
		입력값 검증 규칙은 bean Validation이 제공하는 제약 어노테이션으로 설정한다.
		검사 규칙은 크게 다음 세가지로 분류할 수 있다.
		- Bean Validation 표준 제약 어노테이션
		- 서드파티에서 구현한 제약 어노테이션
		- 직접 구현한 제약 어노테이션
		
		입력값 검증 규칙
			
			@NotNull
			@NotBlank
			@Size
			@Email
			@Past
			@Future
			.... 
			등등이 있는데 ValidationController 클래스 내 3번 입력값 검증 규칙으로 가서 직접 확인하고,
			구글링해서 더 많은 정보를 얻어 더 좋고 더 빠르고 더 가독성 있는 소프트웨어를 만들어주시길 바랍니다!!!!
			아자아자!!!
			
	[3 참고 소스]--------------------------------------------
		Controller : ValidationController
		JSP : validaion/*
	------------------------------------------------------
	
	4. 중첩된 자바빈즈 입력값 검증
		
		중첩된 자바빈즈와 자바빈즈의 컬렉션에서 정의한 프로퍼티에 대해 입력값 검증을 할 때는 @Valid를 지정한다.
		
		중첩된 자바빈즈 입력값 검증 지정
		
			중첩된 자바빈즈 클래스를 정의하고 @Valid를 지정한다
			// 중첩된 자바빈즈의 입력값 검증을 지정한다
			@Valid
			private Address address;
			// 중첩된 자바빈즈의 입력값 검증을 지정한다
			@Valid
			private List<Card> cardList;
		
	[4 참고 소스]--------------------------------------------
		Controller : ValidationController
		JSP : validaion/*
	------------------------------------------------------
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		